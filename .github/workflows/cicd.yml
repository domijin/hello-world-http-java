name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: domij/hello-world-http-java
  DOCKER_TAG: latest

jobs:
  build:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Build Java application
      run: |
        javac HelloWorld.java
        jar cmvf src/META-INF/MANIFEST.MF HelloWorld.jar *.class
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: java-app
        path: HelloWorld.jar
        retention-days: 1

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: java-app
        path: ./
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to EC2
      run: |
        # Write SSH key to temporary file
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > /tmp/ec2_key.pem
        chmod 600 /tmp/ec2_key.pem
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker ubuntu
        fi
        
        # Deploy application
        sudo docker stop hello-world-http-java || true
        sudo docker rm hello-world-http-java || true
        sudo docker pull domij/hello-world-http-java:latest
        sudo docker run -d --name hello-world-http-java --restart unless-stopped -p 8080:8000 domij/hello-world-http-java:latest
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        
        # Deploy to EC2
        scp -o StrictHostKeyChecking=no -i /tmp/ec2_key.pem deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        ssh -o StrictHostKeyChecking=no -i /tmp/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
        rm -f /tmp/ec2_key.pem
        
    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ secrets.EC2_HOST }}:8080 || exit 1
        echo "Health check passed!" 